import Player from "./pleyer.js";
import map from "./map.js";
import { showModal, showModalWithChoices } from './modal.js';


//–ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞
document.getElementById("roll").addEventListener("click", () => {
  handleTurn();
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—ñ–≤
const players = [
  new Player("–ì—Ä–∞–≤–µ—Ü—å 1", "üöó"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 2", "‚úàÔ∏è"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 3", "üéà"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 4", "üö¢"),
];

let currentPlayerIndex = 0;

// –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
function getCurrentPlayer() {
  return players[currentPlayerIndex];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É
function nextTurn() {
  currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
 }

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤
function updateUI() {
  const info = players
    .map(
      (p) =>
        `<br/>${p.emoji} ${p.name}: $${p.balance} | –í–ª–∞—Å–Ω—ñ—Å—Ç—å: ${
          p.properties.map((prop) => prop.name).join("; ") || "–Ω–µ–º–∞—î"
        }`
    )
    .join();

  document.getElementById("status").innerHTML = info;
}

//–§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ –ø–æ–ª—ñ
function updatePlayer() {
  // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –ø–æ–ª—è
  document.querySelectorAll(".player-token").forEach((el) => el.remove());

  // –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–≥—ñ–¥–Ω–æ —ó—Ö –ø–æ–∑–∏—Ü—ñ–π
  players.forEach((p, idx) => {
    const cell = document.querySelector(`.cell[data-index='${p.position}']`);
    if (cell) {
      if (!p.tokenElement) {

        const token = createToken(p, idx);

        p.tokenElement = token;
      }
      cell.appendChild(p.tokenElement);
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≥—Ä–∞–≤—Ü—è
/**
 * Creates a player token DOM element with specific styles and emoji.
 *
 * @param {Object} player - The player object containing player data.
 * @param {string} player.emoji - The emoji representing the player.
 * @param {number} idx - The index of the player (used for color selection and data attributes).
 * @returns {HTMLDivElement} The created player token element.
 */
const createToken = (player, idx) => {
  const token = document.createElement("div");
  token.className = "player-token";
  token.textContent = '';
  token.dataset.playerIndex = idx;        
  const colors = ["green", "yellow", "red", "blue"];        
  token.style.width = "25px";
  token.style.height = "25px";
  token.style.borderRadius = "50%";
  token.style.borderBottom = `2px solid ${colors[idx % colors.length]}`;
  token.innerHTML = player.emoji; // –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –≥—Ä–∞–≤—Ü—è
  // token.style.backgroundColor = colors[idx % colors.length];        
  token.style.display = "inline-block";
  
  return token;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
function handleTurn(roll) {
  if (typeof roll !== "number") {
    roll = Math.floor(Math.random() * 12) + 1; // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–∏–¥–æ–∫ –≤—ñ–¥ 1 –¥–æ 12
  }
  const player = getCurrentPlayer(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  player.move(roll); // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥—Ä–∞–≤—Ü—è –Ω–∞ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é

  // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –ø–æ–ª—ñ
  const plot = getPlot(player.position); // –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
  console.log("currentPlot: ", plot);

  const plotName = getPlotName(player.position); // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ–ª—è

  // document.getElementById('status').textContent =
  //     `${player.name} –∫–∏–Ω—É–≤ ${roll} —ñ –ø–æ—Ç—Ä–∞–ø–∏–≤ –Ω–∞ ${plotName}`;
  showModal(
    `${player.emoji} ${player.name} –∫–∏–Ω—É–≤ üé≤ ${roll}<br>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞: <strong>${plotName}</strong>`,
    () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏
      if (plot.owner === "bank") {
        showModalWithChoices(
          `${plot.name} –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ $${plot.cost}. –ö—É–ø–∏—Ç–∏?`,
          [
            {
              label: '‚úÖ –ö—É–ø–∏—Ç–∏',
              onClick: () => {
                if (player.balance >= plot.cost) {
                  player.updateBalance(-plot.cost);
                  player.addProperty(plot);
                  plot.owner = player.name;
                  highlightOwnedProperties();
                  updatePlayer();
                  updateUI();
                  nextTurn();
                } else {
                  showModalWithChoices("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!", [
                    { label: 'OK', onClick: () => nextTurn() }
                  ]);
                }
              }
            },
            {
              label: '‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å',
                onClick: () => { nextTurn(); updatePlayer(); updateUI();}
            }
          ]
        );
      } else {
          // —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞
            updatePlayer();
            updateUI();
            nextTurn();
      }
      

      console.log("Current player: ", player);
      console.log("MAP: ", map.getAllPlots());
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    //   updatePlayer();
    //   updateUI();
    //   nextTurn();
    }
  );
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
const getPlotName = (position) => {
  const plots = map.getAllPlots();
  const plot = plots.find((p) => p.position === position);
  return plot ? plot.name : "–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ";
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
const getPlot = (position) => {
  const plots = map.getAllPlots();
  return plots.find((p) => p.position === position);
};

function highlightOwnedProperties() {
  // –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è
  document.querySelectorAll(".cell").forEach((cell) => {
    for (let i = 0; i < players.length; i++) {
      cell.classList.remove(`owned-by-${i}`);
    }
  });

  players.forEach((player, idx) => {
    player.properties.forEach((prop) => {
      const cell = document.querySelector(
        `.cell[data-index='${prop.position}']`
      );
      if (cell) {
        cell.classList.add(`owned-by-${idx}`);
      }
    });
  });
}

export const player = {
  startPosition: () => {
    // const players = document.createElement("div");
    const startCell = document.querySelector(`.cell[data-index='${0}']`);
    players.forEach((p, idx) => {

      const token = createToken(p, idx);
      
      p.tokenElement = token;
      startCell.appendChild(token);
      p.position = 0;
    });
    const player = getCurrentPlayer();
    player.position = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
    document.getElementById(
      "status"
    ).textContent = `${player.name} –ø–æ—á–∏–Ω–∞—î –≥—Ä—É!`;
    updateUI();
  },
};
