import Player from "./pleyer.js";
import map from "./map.js";
import { showModal, showModalWithChoices } from "./modal.js";
import actionPlayer from "./playerActions.js";
import playerActions from "./playerActions.js";

//–ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞
document.getElementById("roll").addEventListener("click", () => {
  handleTurn();
});

const randomPlayers = [
  { name: "–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç", emoji: "üë®‚ÄçüöÄ" },
  { name: "–Ü–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω", emoji: "üëΩ" },
  { name: "–†–æ–±–æ—Ç", emoji: "ü§ñ" },
  { name: "–ó–æ—Ä—è–Ω–∏–π –ö–∞–ø—ñ—Ç–∞–Ω", emoji: "üßë‚Äç‚úàÔ∏è" },
  { name: "–ö–æ—Å–º—ñ—á–Ω–∏–π –ü–µ—Å", emoji: "üêï‚Äçü¶∫" },
  { name: "–ú–∞—Ä—Å—ñ—è–Ω–∏–Ω", emoji: "üõ∏" },
  { name: "–ì–∞–ª–∞–∫—Ç–∏—á–Ω–∏–π –ö—ñ—Ç", emoji: "üê±" },
  { name: "–°—É–ø—É—Ç–Ω–∏–∫", emoji: "üõ∞Ô∏è" }
];

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—ñ–≤
const players = [
  new Player("–ì—Ä–∞–≤–µ—Ü—å 1", "üöó"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 2", "‚úàÔ∏è"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 3", "üéà"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 4", "üö¢"),
];

let currentPlayerIndex = 0;

// –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
function getCurrentPlayer() {
  return players[currentPlayerIndex];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É
function nextTurn() {
  currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤
function updateUI() {
  const status = document.getElementById("status");
  status.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ

  players.forEach((p) => {
    const wrapper = document.createElement("div");
    wrapper.className = "player-info";

    // –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ ‚Äî –µ–º–æ–¥–∂—ñ, —ñ–º'—è, –±–∞–ª–∞–Ω—Å
    wrapper.innerHTML = `
          <div class="player-summary">
              <span class="emoji">${p.emoji}</span>
              <span class="name">${p.name}</span>
              <span class="balance">üí∞ ${p.balance}</span>
          </div>
      `;

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–ª–æ–∫ –∑ –≤–ª–∞—Å–Ω—ñ—Å—Ç—é (–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ)
    const propBlock = document.createElement("div");
    propBlock.className = "player-properties";

    if (p.properties.length > 0) {
      propBlock.innerHTML = p.properties
        .map((prop) => `‚Ä¢ ${prop.name} (${prop.cost}$)`)
        .join("<br/>");
    } else {
      propBlock.textContent = "–Ω–µ–º–∞—î –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ";
    }

    wrapper.appendChild(propBlock);
    status.appendChild(wrapper);
  });
}

//–§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ –ø–æ–ª—ñ
function updatePlayer() {
  // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –ø–æ–ª—è
  document.querySelectorAll(".player-token").forEach((el) => el.remove());

  // –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–≥—ñ–¥–Ω–æ —ó—Ö –ø–æ–∑–∏—Ü—ñ–π
  players.forEach((p, idx) => {
    const cell = document.querySelector(`.cell[data-index='${p.position}']`);
    if (cell) {
      if (!p.tokenElement) {
        const token = createToken(p, idx);

        p.tokenElement = token;
      }

      const overlay = cell.querySelector(".token-overlay");
      if (overlay && !overlay.contains(p.tokenElement)) {
        overlay.appendChild(p.tokenElement);
      }

    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≥—Ä–∞–≤—Ü—è
const createToken = (player, idx) => {
  const token = document.createElement("div");
  token.className = "player-token";
  token.textContent = "";
  token.dataset.playerIndex = idx;
  const colors = ["green", "yellow", "red", "blue"];
  token.style.width = "25px";
  token.style.height = "25px";
  token.style.borderRadius = "50%";
  token.style.border = `3px solid ${colors[idx % colors.length]}`;
  token.innerHTML = player.emoji; // –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –≥—Ä–∞–≤—Ü—è
  token.style.display = "inline-block";

  return token;
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
function handleTurn(
  roll = null // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–∏–¥–æ–∫
)  {
  // console.log("roll: ", roll);
  if (typeof roll !== "number") {
    roll = Math.floor(Math.random() * 12) + 1; // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–∏–¥–æ–∫ –≤—ñ–¥ 1 –¥–æ 12
    if(roll === 1) {
      roll = 2; // –Ø–∫—â–æ –≤–∏–ø–∞–ª–æ 1, —Ç–æ –≤–≤–∞–∂–∞—î–º–æ —Ü–µ 2
    }
  }
  const player = getCurrentPlayer(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è 
  playerActions.salaryCheck(player, roll); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç—É –≥—Ä–∞–≤—Ü—è

  player.move(roll); // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥—Ä–∞–≤—Ü—è –Ω–∞ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é

  const plot = getPlot(player.position); // –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
  // console.log("currentPlot: ", plot);

  const plotName = getPlotName(player.position); // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ–ª—è

  showModal(
    `${player.emoji} ${player.name} –∫–∏–Ω—É–≤ üé≤ ${roll}<br>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞: <strong>${plotName}</strong>`,
    () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏
      if (plot.owner === "bank") {
        showModalForByPlot(player, plot); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∫—É–ø—ñ–≤–ª—ñ –¥—ñ–ª—è–Ω–∫–∏
      } else if (plot.owner !== player.name) {  // –Ø–∫—â–æ –ø–æ–ª–µ –∑–∞–π–Ω—è—Ç–µ —ñ–Ω—à–∏–º –≥—Ä–∞–≤—Ü–µ–º, —Å–ø–ª–∞—á—É—î–º–æ –æ—Ä–µ–Ω–¥—É
          // console.log("Pey rent: ", plot.rent);       
        if (plot.owner !== 'bank' && plot.owner !== player.name) {
          const success = actionPlayer.payRentToOwner(player, plot, players);
          if (success) {
            alert(`${player.name} —Å–ø–ª–∞—Ç–∏–≤ –æ—Ä–µ–Ω–¥—É $${plot.rent} –≥—Ä–∞–≤—Ü—é ${plot.owner}`);
            updateUI(); // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥—Ä–∞–≤—Ü—ñ–≤
          } else {
            alert(`${player.name} –Ω–µ –∑–º—ñ–≥ —Å–ø–ª–∞—Ç–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!`);
          }
        }
      }      
      else {
        // —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞
      }   
    }
  );
   // console.log("Current player: ", player);
      console.log("MAP: ", map.getAllPlots());
   // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updatePlayer();
        updateUI();
        nextTurn();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
const getPlotName = (position) => {
  const plots = map.getAllPlots();
  const plot = plots.find((p) => p.position === position);
  return plot ? plot.name : "–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ";
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
const getPlot = (position) => {
  const plots = map.getAllPlots();
  return plots.find((p) => p.position === position);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ —É –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤
function highlightOwnedProperties() {
  // –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è
  document.querySelectorAll(".cell").forEach((cell) => {
    for (let i = 0; i < players.length; i++) {
      cell.classList.remove(`owned-by-${i}`);
    }
  });

  players.forEach((player, idx) => {
    player.properties.forEach((prop) => {
      const cell = document.querySelector(
        `.cell[data-index='${prop.position}']`
      );
      if (cell) {
        cell.classList.add(`owned-by-${idx}`);
      }
    });
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∫—É–ø—ñ–≤–ª—ñ –¥—ñ–ª—è–Ω–∫–∏
const showModalForByPlot = (player, plot) => { 
  showModalWithChoices(
    `${plot.name} –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ $${plot.cost}. –ö—É–ø–∏—Ç–∏?`,
    [
      {
        label: "‚úÖ –ö—É–ø–∏—Ç–∏",
        onClick: () => {
          if (player.balance >= plot.cost) {                 
            actionPlayer.buyPlot(player, plot); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∫—É–ø—ñ–≤–ª—ñ –¥—ñ–ª—è–Ω–∫–∏
            highlightOwnedProperties();  
            updateUI(); // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          } else {
            showModalWithChoices("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!", [
              { label: "OK", onClick: () => nextTurn() },
            ]);
            updateUI();
          }
        },
      },
      {
        label: "‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å",
        onClick: () => {      
        },
      },
    ]
  );

}



// playerMove.js ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
export const player = {
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
  startPosition: () => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
    const startCell = document.querySelector(`.cell[data-index='${0}']`);
    players.forEach((p, idx) => {
      const token = createToken(p, idx);

      p.tokenElement = token;
      startCell.querySelector('.token-overlay').appendChild(token);
      p.position = 0;
    });
    const player = getCurrentPlayer();
    player.position = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
    document.getElementById("status" ).textContent = `${player.name} –ø–æ—á–∏–Ω–∞—î –≥—Ä—É!`;
    updateUI();
  },
};
