import Player from "./pleyer.js";
import map from "./map.js";
import { showModal, showModalWithChoices } from "./modal.js";
import actionPlayer from "./playerActions.js";
import playerActions from "./playerActions.js";
import { logAction } from "./utils.js";
import { handleCardDraw } from "./cardEvents.js";
import { emojiSet } from "./emojiSet.js";

//–ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞
document.getElementById("roll").addEventListener("click", () => {
  handleTurn();
});

// –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ "–ö—ñ–Ω–µ—Ü—å —Ö–æ–¥—É"
const endTurnBtn = document.getElementById("endTurn");

endTurnBtn.addEventListener("click", endTurn);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
function endTurn() {
  // üîí –±–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–µ –∫–ª—ñ–∫–Ω—É–ª–∏ –¥–≤—ñ—á—ñ
  endTurnBtn.disabled = true;
  const currentPlayer = getCurrentPlayer(); // –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  currentPlayer.doublesCount = 0; // —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥—É–±–ª—ñ–≤
  logAction(`${currentPlayer.emoji} ${currentPlayer.name} –∑–∞–≤–µ—Ä—à—É—î —Ö—ñ–¥ ‚è≠Ô∏è`);
  enableRollButton(); // —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
  nextTurn(); // üëâ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥
  const nextPlayer = getCurrentPlayer(); // –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  infoPlayer(nextPlayer); // –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
}

const jailPosition = 10; // –ü–æ–∑–∏—Ü—ñ—è –≤'—è–∑–Ω–∏—Ü—ñ

const randomPlayers = [
  { name: "–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç", emoji: "üë®‚ÄçüöÄ" },
  { name: "–Ü–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω", emoji: "üëΩ" },
  { name: "–†–æ–±–æ—Ç", emoji: "ü§ñ" },
  { name: "–ó–æ—Ä—è–Ω–∏–π –ö–∞–ø—ñ—Ç–∞–Ω", emoji: "üßë‚Äç‚úàÔ∏è" },
  { name: "–ö–æ—Å–º—ñ—á–Ω–∏–π –ü–µ—Å", emoji: "üêï‚Äçü¶∫" },
  { name: "–ú–∞—Ä—Å—ñ—è–Ω–∏–Ω", emoji: "üõ∏" },
  { name: "–ì–∞–ª–∞–∫—Ç–∏—á–Ω–∏–π –ö—ñ—Ç", emoji: "üê±" },
  { name: "–°—É–ø—É—Ç–Ω–∏–∫", emoji: "üõ∞Ô∏è" },
];

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—ñ–≤
const players = [
  new Player("–ì—Ä–∞–≤–µ—Ü—å 1", "üöó"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 2", "‚úàÔ∏è"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 3", "üéà"),
  new Player("–ì—Ä–∞–≤–µ—Ü—å 4", "üö¢"),
];

let currentPlayerIndex = 0;


// –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
function getCurrentPlayer() {
  return players[currentPlayerIndex];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É
function nextTurn() {
  currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤
function updateUI() {
  const status = document.getElementById("status");
  status.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ

  players.forEach((p) => {
    const wrapper = document.createElement("div");
    wrapper.className = "player-info";

    // –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ ‚Äî –µ–º–æ–¥–∂—ñ, —ñ–º'—è, –±–∞–ª–∞–Ω—Å
    wrapper.innerHTML = `
          <div class="player-summary">
              <span class="emoji">${p.emoji}</span>
              <span class="name">${p.name}</span>
              <span class="balance">üí∞ ${p.balance}</span>
          </div>
      `;

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–ª–æ–∫ –∑ –≤–ª–∞—Å–Ω—ñ—Å—Ç—é (–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ)
    const propBlock = document.createElement("div");
    propBlock.className = "player-properties";

    if (p.properties.length > 0) {
      propBlock.innerHTML = p.properties
        .map((prop) => `‚Ä¢ ${prop.name} (${prop.cost}$)`)
        .join("<br/>");
    } else {
      propBlock.textContent = "–Ω–µ–º–∞—î –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ";
    }

    wrapper.appendChild(propBlock);
    status.appendChild(wrapper);
  });
}

//–§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ –ø–æ–ª—ñ
function updatePlayer() {
  // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –ø–æ–ª—è
  document.querySelectorAll(".player-token").forEach((el) => el.remove());

  // –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–≥—ñ–¥–Ω–æ —ó—Ö –ø–æ–∑–∏—Ü—ñ–π
  players.forEach((p, idx) => {
    const cell = document.querySelector(`.cell[data-index='${p.position}']`);
    if (cell) {
      if (!p.tokenElement) {
        const token = createToken(p, idx);

        p.tokenElement = token;
      }

      const overlay = cell.querySelector(".token-overlay");
      if (overlay && !overlay.contains(p.tokenElement)) {
        overlay.appendChild(p.tokenElement);
      }
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≥—Ä–∞–≤—Ü—è
const createToken = (player, idx) => {
  const token = document.createElement("div");
  token.className = "player-token";
  token.textContent = "";
  token.dataset.playerIndex = idx;
  const colors = ["green", "yellow", "red", "blue"];
  token.style.width = "25px";
  token.style.height = "25px";
  token.style.borderRadius = "50%";
  token.style.border = `3px solid ${colors[idx % colors.length]}`;
  token.innerHTML = player.emoji; // –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –≥—Ä–∞–≤—Ü—è
  token.style.display = "inline-block";

  return token;
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä–∞–≤—Ü—è
function infoPlayer(player) {
  document.getElementById(
    "infoText"
  ).textContent = `–•—ñ–¥: ${player.emoji} ${player.name}  ‚Äî  –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ü–µ—Ä–µ–¥–∞—Ç–∏ —Ö—ñ–¥¬ª, –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—à –¥—ñ—ó`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
function handleTurn(roll = 0) {
  endTurnBtn.disabled = true; // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ö—ñ–Ω–µ—Ü—å —Ö–æ–¥—É"
  const player = getCurrentPlayer(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  infoPlayer(player); // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä–∞–≤—Ü—è  

  // üß± –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤'—è–∑–Ω–∏—Ü—ñ
  if (player.inJail) {
    const result = handleJail(player);
    if (!result.freed) {
      // nextTurn();
      return; // –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—î —Ö—ñ–¥
    }
    // –Ø–∫—â–æ –≤–∏–π—à–æ–≤ ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–∞–ª—ñ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Ö—ñ–¥
    logAction(
      `${player.emoji} ${player.name} –≤–∏–π—à–æ–≤ –∑ –≤'—è–∑–Ω–∏—Ü—ñ —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î –≥—Ä—É üéâ`
    );
  }  
  const { die1, die2, sum, isDouble } = rollDice(); // –ö–∏–¥–∞—î–º–æ –∫—É–±–∏–∫–∏
  //-----

  //–ë–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
  // const die1 = 1;
  // const die2 = 1; // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—É–±–∏–∫—ñ–≤
  // const isDouble = die1 === die2; // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ
  // const sum = die1 + die2; // –°—É–º–∞ –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
  //-----------------

  logAction(
    `${player.emoji} ${player.name} –∫–∏–Ω—É–≤ üé≤ ${die1} i ${die2} ${
      isDouble ? "(–î—É–±–ª—å)" : ""
    }`
  );

  roll = sum; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É–º—É –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞

  const newPosition = (player.position + roll) % 40; // –û–±—á–∏—Å–ª—é—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–ª—ñ–≤ –Ω–∞ –ø–æ–ª—ñ

  player.lastRoll = roll; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞

  logAction(
    `${player.emoji}  –∫–∏–Ω—É–≤ —Å—É–º—É –∫—É–±–∏–∫—ñ–≤ üé≤: <b>${roll}</b> (–∑ ${
      getPlot(player.position).name
    } –Ω–∞ ${getPlot(newPosition).name})`
  ); // –ª–æ–≥ –¥—ñ—ó –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞

  if (isDouble) {
    player.doublesCount = (player.doublesCount || 0) + 1;
    if (player.doublesCount === 3) {
      player.position = jailPosition; // —Ç—é—Ä–º–∞
      player.inJail = true;
      logAction(
        `${player.emoji} ${player.name} –∫–∏–Ω—É–≤ –¥—É–±–ª—å 3 —Ä–∞–∑–∏ –ø—ñ–¥—Ä—è–¥ —ñ –ø–æ—Ç—Ä–∞–ø–ª—è—î —É –≤'—è–∑–Ω–∏—Ü—é ${emojiSet.jail.alarm}`
      );
      updatePlayer();
      updateUI();
      nextTurn();
      return;
    }
  } else {
    player.doublesCount = 0; // —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —è–∫—â–æ –Ω–µ –¥—É–±–ª—å
  }

  playerActions.salaryCheck(player, roll); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç—É –≥—Ä–∞–≤—Ü—è

  player.move(roll); // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥—Ä–∞–≤—Ü—è –Ω–∞ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é

  const plot = getPlot(player.position); // –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
  const plotName = getPlotName(player.position); // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ–ª—è

  showModal(
    `${player.emoji} ${player.name} –∫–∏–Ω—É–≤ üé≤ <b>${die1} i ${die2}</b><br>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞: <strong>${plotName}</strong>`,
    () => hundelByPlotOrPayrent(plot, player, roll, isDouble)
  );

  console.log("Current player: ", player);
  console.log("MAP_Plot: ", plot);

  // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  updatePlayer();
  updateUI();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
const getroll = () => {
  // console.log("roll: ", roll);
  let roll = 0;
  roll = Math.floor(Math.random() * 12) + 1; // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–∏–¥–æ–∫ –≤—ñ–¥ 1 –¥–æ 12
  if (roll === 1) {
    roll = 2; // –Ø–∫—â–æ –≤–∏–ø–∞–ª–æ 1, —Ç–æ –≤–≤–∞–∂–∞—î–º–æ —Ü–µ 2
  }
  return roll;
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–∏–¥–∫–∞ –¥–≤–æ—Ö –∫—É–±–∏–∫—ñ–≤
// –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–∏–¥–∫–∞
const rollDice = () => {
  const die1 = Math.floor(Math.random() * 6) + 1;
  const die2 = Math.floor(Math.random() * 6) + 1;
  // return { die1, die2, sum: die1 + die2, isDouble: die1 === die2 };

  return { die1: 3, die2: 4, sum: 7, isDouble: false }; //for TEST
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
const getPlotName = (position) => {
  const plots = map.getAllPlots();
  const plot = plots.find((p) => p.position === position);
  return plot ? plot.name : "–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ";
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –ø–æ–ª—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
const getPlot = (position) => {
  const plots = map.getAllPlots();
  return plots.find((p) => p.position === position);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ —É –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤
const highlightOwnedProperties = () => {
  // –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è
  document.querySelectorAll(".cell").forEach((cell) => {
    for (let i = 0; i < players.length; i++) {
      cell.classList.remove(`owned-by-${i}`);
    }
  });

  players.forEach((player, idx) => {
    player.properties.forEach((prop) => {
      const cell = document.querySelector(
        `.cell[data-index='${prop.position}']`
      );
      if (cell) {
        cell.classList.add(`owned-by-${idx}`);
      }
    });
  });

  map.getAllPlots().forEach((plot) => {
    const cell = document.querySelector(`.cell[data-index='${plot.position}']`);
    if (!cell) return;

    if (plot.mortgage) {
      cell.classList.add("mortgaged"); // üîò —è–∫—â–æ –∑–∞—Å—Ç–∞–≤–ª–µ–Ω–æ ‚Äî —Å—ñ—Ä–∏–π —Ñ–æ–Ω –ø–æ–≤–µ—Ä—Ö
    } else {
      cell.classList.remove("mortgaged");
    }
  });
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∫—É–ø—ñ–≤–ª—ñ –¥—ñ–ª—è–Ω–∫–∏
const showModalForByPlot = (player, plot, onComplete) => {
  showModalWithChoices(`${plot.name} –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ $${plot.cost}. –ö—É–ø–∏—Ç–∏?`, [
    {
      label: "‚úÖ –ö—É–ø–∏—Ç–∏",
      onClick: () => {
        if (player.balance >= plot.cost) {
          actionPlayer.buyPlot(player, plot);
          highlightOwnedProperties();
          logAction(
            `${player.emoji} ${player.name} –∫—É–ø–∏–≤ ${plot.name} –∑–∞ $${plot.cost}`
          );
          updateUI();
          onComplete(); // ‚¨ÖÔ∏è –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ö—ñ–¥
        } else {
          showModalWithChoices("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!", [
            {
              label: "OK",
              onClick: () => {
                updateUI();
                onComplete(); // ‚¨ÖÔ∏è –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ö—ñ–¥ –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏
              },
            },
          ]);
        }
      },
    },
    {
      label: "‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å",
      onClick: () => {
        logAction(
          `${player.emoji} ${player.name} –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –∫—É–ø—É–≤–∞—Ç–∏ ${plot.name}`
        );
        updateUI();
        onComplete(); // ‚¨ÖÔ∏è –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ö—ñ–¥
      },
    },
  ]);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
const startPosition = () => {
  const player = getCurrentPlayer();
  logAction(
    "–ì—Ä–∞–≤—Ü—ñ —Ä–æ–∑—Ç–∞—à–æ–≤—É—é—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é." +
      `<br>–ì—Ä—É –ø–æ—á–∏–Ω–∞—î ${player.emoji} ${player.name}`
  ); // –ª–æ–≥ –¥—ñ—ó
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
  const startCell = document.querySelector(`.cell[data-index='${0}']`);
  players.forEach((p, idx) => {
    const token = createToken(p, idx);

    p.tokenElement = token;
    startCell.querySelector(".token-overlay").appendChild(token);
    p.position = 0;
  });

  player.position = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
  // document.getElementById("status" ).textContent = `${player.name} –ø–æ—á–∏–Ω–∞—î –≥—Ä—É!`;
  console.log("MAP: ", map.getAllPlots());
  updateUI();
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ö—ñ–Ω–µ—Ü—å —Ö–æ–¥—É"
function enableEndTurn() {
  endTurnBtn.disabled = false;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ö–∏–¥–æ–∫ –∫—É–±–∏–∫–∞"
function disableRollButton() {
  const rollButton = document.getElementById("roll");
  rollButton.disabled = true; // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ö–∏–¥–æ–∫ –∫—É–±–∏–∫–∞"
function enableRollButton() {
  const rollButton = document.getElementById("roll");
  rollButton.disabled = false; // –†–æ–∑–±–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏ —É –±–∞–Ω–∫—É
const handleBankPurchase = (player, plot, isDouble) => {
  showModalForByPlot(player, plot, () => finishTurn(player, isDouble));
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–æ–≥—ñ–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏ –∞–±–æ —Å–ø–ª–∞—Ç–∏ –æ—Ä–µ–Ω–¥–∏
const hundelByPlotOrPayrent = (plot, player, roll, isDouble) => {
  // console.log("HundelByPlotOrPayrent: ", plot, player, roll, isDouble);

  // –ö—É–ø—ñ–≤–ª—è —É –±–∞–Ω–∫—É
  if (plot.owner === "bank") {
    handleBankPurchase(player, plot, isDouble);
    return;
  }

  // –ü–æ–ª–µ –ü–∞—Ä–∫—ñ–Ω–≥
  if (plot.type === "parking") {
    const sum = plot.cost || 0;
    if (sum > 0) {
      player.updateBalance(sum);
      plot.cost = 0;
      logAction(
        `${player.emoji} ${player.name} –æ—Ç—Ä–∏–º—É—î $${sum} –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑ –ø–∞—Ä–∫—ñ–Ω–≥—É`
      );
    } else {
      logAction(`${player.emoji} ${player.name} –ø–æ—Ç—Ä–∞–ø–∏–≤ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π –ü–∞—Ä–∫—ñ–Ω–≥`);
    }
    updateParkingDisplay();
    updateUI();
    return finishTurn(player, isDouble);
  }

  // –ü–æ–¥–∞—Ç–æ–∫
  if (plot.type === "tax") {
    if (chekTax(plot, player)) {
      logAction(
        `${player.emoji} ${player.name} —Å–ø–ª–∞—á—É—î –ø–æ–¥–∞—Ç–æ–∫ ${
          plot.name
        } —É —Ä–æ–∑–º—ñ—Ä—ñ $${Math.abs(plot.cost || 0)}`
      );
    } else {
      alert(`${player.name} –Ω–µ –∑–º—ñ–≥ —Å–ø–ª–∞—Ç–∏—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!`);
    }
    updateUI();
    return finishTurn(player, isDouble);
  }

  // –®–∞–Ω—Å –∞–±–æ –ë—é–¥–∂–µ—Ç
  if (plot.type === "chance" || plot.type === "budget") {
    if (roll === 0) {
      return finishTurn(player, isDouble);
    }
    // console.log("plot.type: CHANCE OR BUDGET: ", plot.type);
    handleCardDraw(
      plot.type,
      player,
      () => finishTurn(player, isDouble),
      plot,
      isDouble,
      players
    );
    // handleCardDraw(plot.type, player);
    return;
  }

  /* ‚öñÔ∏è  –ü–æ–ª–µ ¬´–°—É–¥¬ª ‚Äî –æ–¥—Ä–∞–∑—É —É –≤'—è–∑–Ω–∏—Ü—é */
  if (plot.type === "court") {
    player.position = jailPosition; // –ø–æ–∑–∏—Ü—ñ—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ ¬´–í'—è–∑–Ω–∏—Ü—è¬ª
    player.inJail = true;
    player.jailTurns = 0;
    player.doublesCount = 0;

    logAction(
      `${player.emoji} ${player.name} –ø–æ—Ç—Ä–∞–ø–ª—è—î –Ω–∞ ‚öñÔ∏è –°—É–¥ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è —É üß± –í'—è–∑–Ω–∏—Ü—é`
    );
    updatePlayer();
    updateUI();
    return finishTurn(player, isDouble);
  }

  // –û—Ä–µ–Ω–¥–∞ —ñ–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü–µ–≤—ñ
  if (plot.owner && plot.owner !== player.name && plot.owner !== "city") {
    const success = actionPlayer.payRentToOwner(player, plot, players);
    if (!success) {
      alert(
        `${player.name} –Ω–µ –∑–º—ñ–≥ —Å–ø–ª–∞—Ç–∏—Ç–∏ –æ—Ä–µ–Ω–¥—É ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤![465]`
      );
    }
    updateUI();
    return finishTurn(player, isDouble);
  }

  // –Ø–∫—â–æ –ø–æ–ª–µ –Ω–µ –æ–±—Ä–æ–±–∏–ª–æ—Å—å
  console.log(
    `row: [411]${player.name} –Ω–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –¥—ñ—é ‚Äî –Ω–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ [else 003]`
  );
  return finishTurn(player, isDouble);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
function finishTurn(player, isDouble) {
  if (isDouble && player.doublesCount < 3 && !player.inJail) {
    logAction(`${player.emoji} ${player.name} –æ—Ç—Ä–∏–º—É—î —â–µ –æ–¥–∏–Ω —Ö—ñ–¥ üé≤`);
    handleTurn();
  } else {
    // player.doublesCount = 0;
    // logAction(`${player.emoji} ${player.name} –ø–µ—Ä–µ–¥–∞—î —Ö—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é`);
    enableEndTurn();
    disableRollButton();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø–ª–∞—Ç–∏ –ø–æ–¥–∞—Ç–∫—É
const chekTax = (plot, player) => {
  if (plot.type === "tax") {
    const taxAmount = Math.abs(plot.cost || 0);
    const success = player.pay(taxAmount); // —Å–ø–ª–∞—á—É—î –±–∞–Ω–∫—É

    if (success) {
      addToParking(taxAmount); // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫—É
      updateParkingDisplay();
      return true; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ true, —è–∫—â–æ –ø–æ–¥–∞—Ç–æ–∫ —Å–ø–ª–∞—á–µ–Ω–æ
    } else {
      alert(
        `${player.name} –Ω–µ –º–æ–∂–µ —Å–ø–ª–∞—Ç–∏—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫ —É $${taxAmount} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!`
      );
      logAction(`${player.name} –Ω–µ –∑–º—ñ–≥ —Å–ø–ª–∞—Ç–∏—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫ ${plot.name}`);
      return false; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ false, —è–∫—â–æ –ø–æ–¥–∞—Ç–æ–∫ –Ω–µ —Å–ø–ª–∞—á–µ–Ω–æ
    }
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫—É
const addToParking = (amount) => {
  const plots = map.getAllPlots();
  const parking = plots.find((p) => p.type === "parking");
  if (parking) {
    parking.cost = (parking.cost || 0) + amount;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∫—ñ–Ω–≥—É
const updateParkingDisplay = () => {
  const plots = map.getAllPlots();
  const parking = plots.find((p) => p.type === "parking");
  if (!parking) return;

  const cell = document.querySelector(
    `.cell[data-index="${parking.position}"]`
  );
  const display = cell?.querySelector(".parking-amount");
  if (display) {
    display.textContent = `$${parking.cost || 0}`;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –∫–∞—Ä—Ç–∫–æ—é "–í–∏–π—Ç–∏ –∑ –≤'—è–∑–Ω–∏—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ"
const showModalJailFree = (player) =>   {
  showModalWithChoices(
    "üßæ –í–∏ –º–∞—î—Ç–µ –∫–∞—Ä—Ç–∫—É ¬´–í–∏–π—Ç–∏ –∑ –≤'—è–∑–Ω–∏—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ¬ª. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ó—ó?",
    [
      {
        label: "‚úÖ –¢–∞–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏",
        onClick: () => {
          // –ª–æ–≥—ñ–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –≤'—è–∑–Ω–∏—Ü—ñ
          player.inJail = false;
          player.jailTurns = 0;
          player.jailFree -= 1; // –∞–±–æ –≤–∏–¥–∞–ª—è—î—à –∑ –º–∞—Å–∏–≤—É –∫–∞—Ä—Ç–æ–∫
          logAction(
            `${player.emoji} ${player.name} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–∞—Ä—Ç–∫—É ¬´–í–∏–π—Ç–∏ –∑ –≤'—è–∑–Ω–∏—Ü—ñ¬ª`
          );
          updatePlayer();
          updateUI();
          return true;
        },
      },
      {
        label: "‚ùå –ù—ñ",
        onClick: () => {
          logAction(
            `${player.emoji} ${player.name} –≤–∏—Ä—ñ—à–∏–≤ –∑–∞–ª–∏—à–∏—Ç–∏—Å—å —É –≤'—è–∑–Ω–∏—Ü—ñ —â–µ –Ω–∞ –æ–¥–∏–Ω —Ö—ñ–¥`
          );
          return false; // —è–∫—â–æ –Ω–µ —Ö–æ—á–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É,      
        },
      },
    ]
  );
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤'—è–∑–Ω–∏—Ü—ñ
function handleJail(player) {
  player.jailTurns++;

  if (player.jailFree > 0) {     
    const res = showModalJailFree(player);    
    if (res) {
      return { freed: true, sum: 0, isDouble: false }; // —è–∫—â–æ –≤–∏–π—à–æ–≤ –∑ –≤'—è–∑–Ω–∏—Ü—ñ
    }
  }

  logAction(
    `${player.emoji} ${player.name} —É –≤'—è–∑–Ω–∏—Ü—ñ (—Ö—ñ–¥ ${player.jailTurns} –∑ 3)`
  );

  const { die1, die2, sum, isDouble } = rollDice();
  logAction(`${player.emoji} –∫–∏–¥–∞—î –∫—É–±–∏–∫–∏ —É –≤'—è–∑–Ω–∏—Ü—ñ: üé≤ ${die1} —ñ ${die2}`);

  if (isDouble) {
    logAction(
      `${player.emoji} ${player.name} –≤–∏–∫–∏–¥–∞—î –¥—É–±–ª—å —ñ –≤–∏—Ö–æ–¥–∏—Ç—å –∑ –≤'—è–∑–Ω–∏—Ü—ñ!`
    );
    player.inJail = false;
    player.jailTurns = 0;
    player.move(sum);
    return { freed: true, roll: sum, isDouble: true };
  }

  if (player.jailTurns >= 3) {
    logAction(
      `${player.emoji} ${player.name} –≤—ñ–¥—Å–∏–¥—ñ–≤ 3 —Ö–æ–¥–∏ —ñ –≤–∏—Ö–æ–¥–∏—Ç—å –∑ –≤'—è–∑–Ω–∏—Ü—ñ`
    );
    player.inJail = false;
    player.jailTurns = 0;
    player.updateBalance(-50); // —à—Ç—Ä–∞—Ñ
    player.move(sum);
    return { freed: true, roll: sum, isDouble: false };
  }

  // —â–µ —Å–∏–¥–∏—Ç—å
  logAction(
    `${player.emoji} ${player.name} –ø–µ—Ä–µ–¥–∞—î —Ö—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≥—Ä–∞–≤—Ü–µ–≤—ñ, –∑–∞–ª–∏—à–∞—é—á–∏—Å—å —É –≤'—è–∑–Ω–∏—Ü—ñ`
  );
  disableRollButton();
  enableEndTurn();
  return { freed: false };
}

// playerMove.js ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
export const playerMain = {
  startPosition,
  updateUI,
  updatePlayer,
  handleBankPurchase,
  hundelByPlotOrPayrent,
  highlightOwnedProperties,
  getPlot,
  getCurrentPlayer,
};
