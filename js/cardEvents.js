// js/cardEvents.js
// --------------------------------------------------
// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –∫–∞—Ä—Ç–æ–∫ ¬´–®–∞–Ω—Å¬ª —ñ ¬´–ë—é–¥–∂–µ—Ç¬ª
// --------------------------------------------------

import { updatePlayer, updateUI } from "./playerMove.js";
import { logAction } from "./logActions.js";
import { showModal } from "./modal.js"; // —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–¥–∞–ª–∫–∏

/* –¥–∂–µ—Ä–µ–ª–∞ JSON-—Ñ–∞–π–ª—ñ–≤ */
const CARD_SRC = {
  chance: "../src/chanceCard.json",
  budget: "../src/budgetCard.json",
};

/* –∫–µ—à, —â–æ–± –Ω–µ —Ç—è–≥–Ω—É—Ç–∏ —Ñ–∞–π–ª–∏ —â–æ—Ä–∞–∑—É */
const cardCache = {
  chance: null,
  budget: null,
};

/* –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–∞—Å–∏–≤ –∫–∞—Ä—Ç–æ–∫ —Ç–∞ –∫–µ—à—É—î */
export async function loadCards(type) {
  if (cardCache[type]) return cardCache[type];

  const res = await fetch(CARD_SRC[type]);
  const data = await res.json();
  cardCache[type] = data;
  return data;
}

/**
 * –í–∏—Ç—è–≥—É—î –≤–∏–ø–∞–¥–∫–æ–≤—É –∫–∞—Ä—Ç–∫—É type ('chance' –∞–±–æ 'budget'),
 * –∑–∞—Å—Ç–æ—Å–æ–≤—É—î —ó—ó –µ—Ñ–µ–∫—Ç, –∞ —Ç–æ–¥—ñ –≤–∏–∫–ª–∏–∫–∞—î onComplete() –¥–ª—è
 * –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ö–æ–¥—É (finishTurn / nextTurn).
 */
export async function handleCardDraw(type, player, onComplete) {
  const cards = await loadCards(type);
  const card = cards[Math.floor(Math.random() * cards.length)];

  logAction(
    `${player.emoji} ${player.name} —Ç—è–≥–Ω–µ –∫–∞—Ä—Ç–∫—É ${type.toUpperCase()}: ¬´${
      card.message
    }¬ª`
  );

  // –ø–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–∫–∏ –≤ –º–æ–¥–∞–ª—Ü—ñ
  showModal(card.message, () => {
    /* ‚ñ∫ –ì—Ä–æ—à—ñ (value) */
    if (typeof card.value === "number" && card.value !== 0) {
      if (card.value > 0) {
        player.updateBalance(card.value);
        logAction(`${player.emoji} ${player.name} –æ—Ç—Ä–∏–º—É—î $${card.value}`);
      } else {
        player.pay(Math.abs(card.value));
        logAction(
          `${player.emoji} ${player.name} —Å–ø–ª–∞—á—É—î $${Math.abs(card.value)}`
        );
      }
    }

    /* ‚ñ∫ –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø–æ –ø–æ–ª—é (position) */
    if (typeof card.position === "number") {
      let target = card.position;

      // –≤—ñ–¥'—î–º–Ω–µ ‚Äî –∫—Ä–æ–∫ –Ω–∞–∑–∞–¥
      if (card.position < 0) {
        target = (player.position + card.position + 40) % 40;
      }

      const passedStart = target < player.position && !card.jail;
      player.position = target;
      updatePlayer();

      if (passedStart) {
        player.updateBalance(200);
        logAction(
          `${player.emoji} ${player.name} –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –°—Ç–∞—Ä—Ç —ñ –æ—Ç—Ä–∏–º—É—î $200`
        );
      }
    }

    /* ‚ñ∫ –¢—é—Ä–º–∞ */
    if (card.jail) {
      player.position = 10; // –ø–æ–∑–∏—Ü—ñ—è –≤'—è–∑–Ω–∏—Ü—ñ
      player.inJail = true;
      logAction(`${player.emoji} ${player.name} –ø–æ—Ç—Ä–∞–ø–ª—è—î —É –≤'—è–∑–Ω–∏—Ü—é üöì`);
      updatePlayer();
    }

    updateUI(); // –æ–Ω–æ–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≥—Ä–∞–≤—Ü—ñ–≤ / –±–∞–ª–∞–Ω—Å

    /* –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ü–∏–∫–ª—É –≥—Ä–∏ */
    if (typeof onComplete === "function") onComplete();
  });
}
