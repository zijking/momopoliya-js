const landPlots = []; // üîπ –ú–∞—Å–∏–≤ –¥–ª—è –ø–æ–ª—ñ–≤ –∑ landPlots.json
const companyPlots = []; // üîπ –ú–∞—Å–∏–≤ –¥–ª—è –ø–æ–ª—ñ–≤ –∑ companyPlots.json
const mainAreas = []; // –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
const allPlots = []; // üîπ –ú–∞—Å–∏–≤ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤

// üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –∫–∞—Ä—Ç–∏
const buildMap = () => {
  console.log("Start buildMap");
  const board = document.getElementById("board");

  const cellSize = 80;
  const boardSize = 880;
  const cells = [];

  Promise.all([
    fetch("./src/landPlots.json").then((res) => res.json()),
    fetch("./src/companyPlots.json").then((res) => res.json()),
    fetch("./src/mainAreas.json").then((res) => res.json()),
  ]).then(([lands, companies, mainAr]) => {
    landPlots.push(...lands);
    companyPlots.push(...companies);
    mainAreas.push(...mainAr);

    allPlots.push(...landPlots, ...companyPlots, ...mainAreas); // üîπ –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –º–∞—Å–∏–≤–∏ –≤ –æ–¥–∏–Ω

    renderBoard();
    // updatePlayer();
  });
  // üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ –ø–æ–ª—ñ
  const getCoordinates = (position) => {
    if (position >= 0 && position < 11)
      return [boardSize - cellSize * (position + 1), boardSize - cellSize]; // bottom
    if (position >= 11 && position < 21)
      return [0, boardSize - cellSize * (position - 9)]; // left
    if (position >= 21 && position < 31) return [cellSize * (position - 20), 0]; // top
    if (position >= 31 && position < 40)
      return [boardSize - cellSize, cellSize * (position - 30)]; // right
    return [0, 0];
  };

  // üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ –ø–æ–ª—ñ
  const placeCell = (plot) => {
    console.log("Plot: ", plot);
    const [x, y] = getCoordinates(plot.position);
    const cell = document.createElement("div");
    cell.className = "cell";
    cell.style.left = `${x}px`;
    cell.style.top = `${y}px`;

    if (plot.color) {
      const colorBox = document.createElement("div");
      colorBox.className = "color-box";
      colorBox.style.backgroundColor = plot.color;
      cell.appendChild(colorBox);
    }
    /* ==== –í–∏–∑–Ω–∞—á–∞—î–º–æ, –Ω–∞ —è–∫—ñ–π —Å—Ç–æ—Ä–æ–Ω—ñ –¥–æ—à–∫–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ =============== */
    let side = ""; // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏
    if (plot.position >= 0 && plot.position < 11) side = "bottom"; // –Ω–∏–∂–Ω—ñ–π —Ä—è–¥
    else if (plot.position >= 11 && plot.position < 21)
      side = "left"; // –ª—ñ–≤–∞ –∫–æ–ª–æ–Ω–∞
    else if (plot.position >= 21 && plot.position < 31)
      side = "top"; // –≤–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥
    else side = "right"; // –ø—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∞
    cell.classList.add(`side-${side}`); // –¥–æ–¥–∞—î–º–æ –∫–ª–∞—Å –≤–∏–¥—É side-top / side-left / ‚Ä¶

    // üîπ –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—Ç–∏–Ω–∫—É
    const info = document.createElement("div");
    info.style.zIndex = "1"; // –©–æ–± –±—É–≤ –ø–æ–≤–µ—Ä—Ö –∫–æ–ª—å–æ—Ä—É
    info.innerHTML = `<strong>${plot.name || "#" + plot.position}</strong>`;
    if (plot.cost) info.innerHTML += `<br>üí∞ ${plot.cost}`;
    if (plot.rent) info.innerHTML += `<br>üè† ${plot.rent}`;
    cell.appendChild(info);

    /* ==== –î–û–î–ê–¢–ö–û–í–ò–ô –ë–õ–û–ö –ó –†–ï–ù–¢–û–Æ ===================================== */
    if (plot.rentLandPlot !== undefined) {
      const details = document.createElement("div");
      details.className = "details";

      if (plot.type === "landPlot") {
        const lines = [];
        // –±–µ–∑ –±—É–¥–∏–Ω–∫—ñ–≤
        lines.push(`–ë–µ–∑ –±—É–¥.: $${plot.rentLandPlot}`);

        // –∑ –±—É–¥–∏–Ω–∫–∞–º–∏
        if (Array.isArray(plot.rentWithHouse)) {
          plot.rentWithHouse.forEach((val, idx) => {
            lines.push(`${idx + 1} –±—É–¥.: $${val}`);
          });
        }

        // –∑ –≥–æ—Ç–µ–ª–µ–º
        if (plot.rentWithHotel) {
          lines.push(`–ì–æ—Ç–µ–ª—å: $${plot.rentWithHotel}`);
        }
        details.innerHTML = lines.join("<br>");
      } else if (plot.type === "railway") {
        const lines = [];       
        // –∑ 1 –ø–æ 4 –∑–∞–ª—ñ–∑–Ω–∏—Ü—ñ
        if (Array.isArray(plot.rentWithHouse)) {
          plot.rentWithHouse.forEach((val, idx) => {
            lines.push(`${idx + 1} –∑–∞–ª.: $${val}`);
          });
        }
        details.innerHTML = lines.join("<br>");
      } else if (plot.type === "company") {
        const lines = [];       
        // –∑ 1 –ø–æ 2 –∫–æ–º–ø–∞–Ω—ñ—ó
        if (Array.isArray(plot.rentWithHouse)) {
          plot.rentWithHouse.forEach((val, idx) => {
            lines.push(`${idx + 1} –ö–æ–º.: $x${val}<br>` + (idx === 0 ? "(–∫–∏–¥–∫–∞ –∫—É–±–∏–∫—ñ–≤)" : ""));
          });
        }
        details.innerHTML = lines.join("<br>");
      } else {
        details.innerHTML = "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ–Ω—Ç—É";
      }

      cell.appendChild(details);
    }
    // ==== –ö–Ü–ù–ï–¶–¨ –î–û–î–ê–¢–ö–û–í–û–ì–û –ë–õ–û–ö–£ –ó –†–ï–ù–¢–û–Æ ================================ */
    // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –¥–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏
    cell.dataset.index = plot.position;
    // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–∏–ø –∫–ª—ñ—Ç–∏–Ω–∫–∏
    cell.dataset.mainCost = plot.cost;
    board.appendChild(cell);
    // allPlots.push(plot); // üîπ –î–æ–¥–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∏–≤—É
    cells.push(cell);
  };

  const renderBoard = () => {
    landPlots.forEach(placeCell);
    companyPlots.forEach(placeCell);
    mainAreas.forEach(placeCell);
    // console.log(companyPlots);
  };
};

const getAllPlots = () => {
  return allPlots;
};

export default {
  buildMap,
  getAllPlots,
};
